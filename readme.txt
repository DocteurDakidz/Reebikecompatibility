# Reebike Compatibility Widget

## Objectif
CrÃ©er une section Shopify 2.0 qui permet aux clients de renseigner la marque et le modÃ¨le de leur vÃ©lo musculaire pour Ã©valuer automatiquement la compatibilitÃ© avec les kits de motorisation Reebike (Cosmopolit, Urban, Explorer). Le systÃ¨me s'appuie sur une API open source (GeometryGeeks) ou une base de donnÃ©es locale hÃ©bergÃ©e sur O2SWITCH. En cas d'incertitude, un appel Ã  l'action permet de contacter le support.

## Architecture

### Frontend (Shopify 2.0)
- Section personnalisÃ©e (Liquid)
- Champ texte unique : `Marque + ModÃ¨le`
- Bouton : `Analyser la compatibilitÃ©`
- JS dans `assets/custom-kit.js` :
  - RequÃªte vers backend via `fetch`
  - RÃ©cupÃ©ration de l'Ã©valuation de compatibilitÃ©
  - Affichage d'un des 3 Ã©tats :
    - Compatible avec lien vers produit
    - Incertitude (redirection support)
    - Incompatible

### Backend (API REST lÃ©gÃ¨re)
- DÃ©veloppÃ©e en Flask (Python) sur serveur O2SWITCH
- Route : `GET /api/compat?brand=X&model=Y`
- FonctionnalitÃ©s :
  - Rechercher les caractÃ©ristiques du modÃ¨le (via API ou JSON local)
  - Appliquer la matrice de compatibilitÃ©
  - Retourner une rÃ©ponse JSON claire

## DonnÃ©es vÃ©lo requises

| Champ                   | UtilitÃ©                              | Source           |
|------------------------|----------------------------------------|------------------|
| wheel_axle_front       | Axe traversant ?                       | GeometryGeeks    |
| fork_spacing_mm        | Entraxe avant                         | GeometryGeeks    |
| down_tube_length_mm    | Longueur pour batterie (30cm mini)    | GeometryGeeks    |
| seat_tube_length_mm    | Longueur alternative pour batterie    | GeometryGeeks    |
| brake_type             | Type de frein (info non bloquante)    | GeometryGeeks    |

## âœ… Matrice de compatibilitÃ© Reebike (version simplifiÃ©e)

1. **CritÃ¨res bloquants :**
   - Si `wheel_axle_front` != "QR" ou `fork_spacing_mm` != 100 â†’ **incompatible**

2. **CompatibilitÃ© de base :**
   - Si les deux critÃ¨res ci-dessus sont valides â†’ âœ… **Cosmopolit**

3. **CompatibilitÃ© avancÃ©e :**
   - Si `down_tube_length_mm >= 300` ou `seat_tube_length_mm >= 300` â†’ ajouter âœ… **Urban** et âœ… **Explorer**

4. **DonnÃ©es manquantes :**
   - Si une des donnÃ©es est manquante â†’ rÃ©sultat = **unknown** avec le message : "Certaines donnÃ©es sont manquantes, contactez notre Ã©quipe."

## ğŸ”— Sources de donnÃ©es : API GeometryGeeks

### API GeometryGeeks
- Site : https://geometrygeeks.bike
- Type : API REST non officielle (retour JSON)
- Endpoint principal : `https://geometrygeeks.bike/api/bikes`
- DonnÃ©es utiles rÃ©cupÃ©rables :
  - `brand`
  - `model`
  - `year`
  - `fork_spacing_mm`
  - `wheel_axle_front`
  - `down_tube_length_mm`
  - `seat_tube_length_mm`
  - `brake_type`
- Remarque : certaines valeurs peuvent Ãªtre absentes ou partielles â†’ prÃ©voir fallback JSON local

## RÃ©ponses API types

Consultez le fichier DEVPLAN pour les exemples de structure JSON.

## Bonnes pratiques Shopify 2.0
- Utiliser une `section` dÃ©diÃ©e avec `schema` JSON
- Charger JS via `defer` depuis `assets`
- Isoler CSS dans un fichier scoping `.kit-compatibility`
- Ne pas demander plus dâ€™infos au client que `marque + modÃ¨le`
- Gestion des 3 Ã©tats sans rechargement de page
