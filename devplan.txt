# DevPlan Reebike Compatibility Widget

## Versioning (plan de d√©veloppement)

| Version | Frontend                        | Backend                         | Tests                            | Rollback |
|---------|----------------------------------|----------------------------------|----------------------------------|----------|
| 1.0     | Champ + bouton + affichage mock | API mock avec JSON local        | Tests unitaires JS + Python      | Oui      |
| 1.1     | Autocompl√©tion locale            | Lecture CSV JSON local          | Matching simple                  | Oui      |
| 1.2     | UI + messages clairs            | Int√©gration API GeometryGeeks   | Tests API + fallback             | Oui      |
| 1.3     | UI responsive + CTA support     | Logs, sauvegarde anonymis√©e     | UX tests                         | Oui      |
| 1.4     | Int√©gration Shopify App Option  | Mise en prod O2SWITCH API       | QA finale                        | Oui      |

## üîó Sources de donn√©es : API GeometryGeeks

### API GeometryGeeks
- Site : https://geometrygeeks.bike
- Type : API REST non officielle (retour JSON)
- Endpoint principal : `https://geometrygeeks.bike/api/bikes`
- Donn√©es utiles r√©cup√©rables :
  - `brand`
  - `model`
  - `year`
  - `fork_spacing_mm`
  - `wheel_axle_front`
  - `down_tube_length_mm`
  - `seat_tube_length_mm`
  - `brake_type`
- Remarque : certaines valeurs peuvent √™tre absentes ou partielles ‚Üí pr√©voir fallback JSON local

## ‚úÖ Matrice de compatibilit√© Reebike (version simplifi√©e)

1. **Crit√®res bloquants :**
   - Si `wheel_axle_front` != "QR" ou `fork_spacing_mm` != 100 ‚Üí **incompatible**

2. **Compatibilit√© de base :**
   - Si les deux crit√®res ci-dessus sont valides ‚Üí ‚úÖ **Cosmopolit**

3. **Compatibilit√© avanc√©e :**
   - Si `down_tube_length_mm >= 300` ou `seat_tube_length_mm >= 300` ‚Üí ajouter ‚úÖ **Urban** et ‚úÖ **Explorer**

4. **Donn√©es manquantes :**
   - Si une des donn√©es est manquante ‚Üí r√©sultat = **unknown** avec le message : "Certaines donn√©es sont manquantes, contactez notre √©quipe."

## Backend ‚Äì R√©ponses API types

```json
{
  "status": "compatible",
  "kits": ["Cosmopolit", "Urban"],
  "recommendation_url": "/products/kit-urban",
  "notes": "Compatible si le cadre offre une longueur suffisante pour la batterie."
}
```

```json
{
  "status": "unknown",
  "kits": [],
  "recommendation_url": null,
  "notes": "Certaines donn√©es sont manquantes, contactez notre √©quipe."
}
```

```json
{
  "status": "incompatible",
  "kits": [],
  "recommendation_url": null,
  "notes": "Le v√©lo n'est pas compatible avec nos kits actuels."
}
```

## Prochaine √©tape

D√©veloppement de la version `v1.0` :
- Section `.liquid` Shopify simple (formulaire)
- `custom-kit.js` avec fetch JSON local
- API Flask mock avec `mock_bikes.json`

Livrables : JS, Liquid, CSS, JSON + `app.py`
